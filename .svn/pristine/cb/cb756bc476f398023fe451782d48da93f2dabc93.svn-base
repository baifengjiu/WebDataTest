package fx.zy.ns;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;

import net.sf.json.JSONObject;

public class SendRequest {
	public static String sendByGet(JFrame frame,String url, List<String> par_name, List<String> par_value)
	{
		String response = "";
		
		BufferedReader in = null;
		
		String complete_url = "";
		assert par_name.size()==par_value.size();
		
		for(int i=0; i<par_name.size(); i++)
		{
			if(i!=0){
				complete_url += "&";
			}
			complete_url += par_name.get(i);
			complete_url += "=";
			complete_url += par_value.get(i);
		}
		try {
			complete_url = url + "?" + complete_url;
		 	System.out.println("complete_url:"+complete_url);

		 	URL realUrl = new URL(complete_url);
			URLConnection connection = realUrl.openConnection();
			
			connection.setRequestProperty("accept", "*/*");
	        connection.setRequestProperty("connection", "Keep-Alive");
	        connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
	
	        // 建立实际的链接
	        connection.connect();
	        
	        // 获取响应头字段
	        //Map<String, List<String>> map = connection.getHeaderFields();

	        // 定义 BufferedReader输入流来读取URL的响应
	        in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
	
	        String line;
	        while ((line = in.readLine()) != null) 
	        {
	            response += line;
	        }
		}catch(Exception e){
			System.out.println("发送get请求异常" + e);
			Util.getDialog(frame, e.toString());
			response = "ERROR:"+e.toString();
            e.printStackTrace();
		}finally{
			try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
		}
		
		return response;
	}
	public static String sendByPost(String url, List<String> par_name, List<String> par_value, String contents)
	{
		String response = "";
		
		BufferedReader in = null;
		
		String complete_url = url;
		assert par_name.size()==par_value.size();
		
		for(int i=0; i<par_name.size(); i++)
		{
			if(i==0)
			{
				complete_url += "?";
			}
			else
			{
				complete_url += "&";
			}
			complete_url += par_name.get(i);
			complete_url += "=";
			complete_url += par_value.get(i);
		}
		
		try{
			JSONObject json_obj = JSONObject.fromObject(contents);
            byte[] requestStringBytes = json_obj.toString().getBytes("utf-8");
            
			URL realUrl = new URL(complete_url);

			HttpURLConnection connection = (HttpURLConnection) realUrl.openConnection();
			
			connection.setDoOutput(true); 
            connection.setDoInput(true);
			connection.setRequestMethod("POST"); 
			connection.setUseCaches(false);  
			connection.setRequestProperty("Content-length", "" + requestStringBytes.length);
	        connection.setRequestProperty("Content-Type", "application/json;encoding=utf-8"); 
	        connection.setRequestProperty("Charset", "utf-8");
	
	        connection.connect();
	        
	        DataOutputStream out = new DataOutputStream(connection.getOutputStream()); 
            out.write(requestStringBytes);
            out.flush(); 
            out.close(); 
            
	        Map<String, List<String>> map = connection.getHeaderFields();
	        
	        in = new BufferedReader(new InputStreamReader(
	                connection.getInputStream()));
	
	        String line;
	        while ((line = in.readLine()) != null) 
	        {
	            response += line;
	        }
		}catch(Exception e){
			System.out.print("post请求失败" + e);
            e.printStackTrace();
		}finally{
			try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
		}
		
		return response;
	}

	public String httpUpload(JFrame frame,String murl,String uploadname){
		String response = "";
        String boundary="-------------------------7e020233150564";//编节符
        String prefix="--";//前缀 上传时需要多出两个-- 一定需要注意！！！
        String end="\r\n";//这里也需要注意，在html协议中，用 “/r/n” 换行，而不是 “/n”。

        SimpleDateFormat adf=new SimpleDateFormat("HHmmss");//通过时间来创建文件名
        //String uploadname=adf.format(new Date())+".jsp";//上传的文件名称
        BufferedReader reader=null;
        DataOutputStream out=null;
        try {
            URL http=new URL(murl);
            HttpURLConnection conn= (HttpURLConnection) http.openConnection();
            conn.setRequestMethod("POST");
            conn.setReadTimeout(5000);
            conn.setDoInput(true);//准许向服务器读数据
            conn.setDoOutput(true);//准许向服务器写入数据

            /*设置向服务器上传数据的请求方式  默认的是表单形式
            * 通过Content-Type协议向服务器上传数据
            * boundary
            * */
            conn.setRequestProperty("Content-Type","multipart/form-data;boundary="+boundary);

            //创建一个输出流对象，
            out=new DataOutputStream(conn.getOutputStream());
            /*
            *
              -----------------------------7e020233150564
              Content-Disposition: form-data; name="file"; filename="I:\迅雷下载\18fb1f51c9eb63489cce9e029154782e.jpg"
              Content-Type: image/jpeg
                                        //这里是空一行  需要注意
              <二进制文件数据未显示>
              ---------------------------7e020233150564--
              */
            //向服务器写入数据  这里就需要完全根据以上协议格式来写，需要仔细，避免出错。
            out.writeBytes(prefix+boundary+end);//这是第一行  并回车换行
            //这是第二行，文件名和对应服务器的
            out.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\""+uploadname+"\""+end);//这是第二行
            out.writeBytes(end);//空一行
            //以下写入图片
            FileInputStream fileInputStream=new FileInputStream(new File("mfilename"));
            byte[]b=new byte[1024*4];//缓冲区
            int len;
            //循环读数据
            while((len=fileInputStream.read(b))!=-1){
                out.write(b, 0, len);
            }
            //写完数据后 回车换行
            out.writeBytes(end);
            out.writeBytes(prefix + boundary + prefix + end);
            out.flush();//清空

            //创建一个输入流对象  获取返回的信息  是否上传成功
            reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb=new StringBuffer();
            String str;
            while((str=reader.readLine())!=null){
                sb.append(str);
            }
            //关闭流信息
//            if(out!=null)out.close();
//            if(reader!=null)reader.close();
            response = sb.toString();
            System.out.print("返回结果："+sb.toString());
        } catch (Exception e) {
        	Util.getDialog(frame, e.toString());
			response = "ERROR:"+e.toString();
            e.printStackTrace();
        } finally {
			try {
				//关闭流信息
	            if(out!=null)out.close();
	            if(reader!=null)reader.close();
            } catch (Exception e2) {
                e2.printStackTrace();
            }
		}
        
        return response;
    }

}
